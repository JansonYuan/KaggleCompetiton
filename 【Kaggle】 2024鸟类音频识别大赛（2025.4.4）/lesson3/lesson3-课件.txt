音频数据增强（data augmentation，泛化性能，搭配深度学习模型）的方法：
在原始音频进行变换
在频谱图上进行变换

https://github.com/makcedward/nlpaug/blob/master/example/spectrogram_augmenter.ipynb


音频数据增强的库：
音频数据增强
https://pytorch.org/audio/stable/transforms.html
https://github.com/asteroid-team/torch-audiomentations
https://www.kaggle.com/haqishen/augmentation-methods-for-audio
https://github.com/makcedward/nlpaug
https://iver56.github.io/audiomentations/
图像&矩阵数据增强（空间、尺寸、形变、翻转）
https://pytorch.org/vision/stable/transforms.html
https://albumentations.ai/docs/

方式1：对原始音频进行增强，再提取频谱特征（耗时！）
https://www.kaggle.com/code/tanulsingh077/audio-albumentations-transform-your-audio

方法2（推荐）：对原始音频提取提取频谱特征，再进行增强（mask & 矩阵）

训练集上可以增加变换，验证集（更加稳定的性能评价）做更加弱的变换。
https://www.kaggle.com/saife245/cutmix-vs-mixup-vs-gridmask-vs-cutout

数据扩增方法
常规方法（图像，矩阵计算，减去均值除以方差，【-8 - 8】）：
https://pytorch.org/vision/stable/transforms.html
https://github.com/albumentations-team/albumentations
https://github.com/aleju/imgaug
https://github.com/NVIDIA/DALI
常规方法（音频，矩阵计算，对于音频根据强度进行滤波）：

Mixup（ICLR best paper）：将样本进行插值（增加样本空间），样本标签改变
正样本和负样本进行mixup -> 正样本的曲线是比较明显的 -> 正样本的上采样
正样本 + 负样本 -> 正样本
https://arxiv.org/pdf/1710.09412.pdf
 
AugMix：将样本进行多次变换，然后进行插值 
https://arxiv.org/abs/1912.02781
 
Cutout：随机将样本区域进行遮盖
https://arxiv.org/abs/1708.04552
 
GridMask：将图像均匀进行 Cutout
https://arxiv.org/abs/2001.04086

CutMix：随机裁剪并进行样本拼接，样本标签改变
新样本的标签如何确定呢？https://arxiv.org/abs/1905.04899v1
 
AutoAugment：利用强化学习去学习如何做数据增强
https://openaccess.thecvf.com/content_CVPR_2019/papers/Cubuk_AutoAugment_Learning_Augmentation_Strategies_From_Data_CVPR_2019_paper.pdf

FMix：将图像分为高频和低频信息，并进行结合
https://github.com/ecs-vlc/FMix
 Adversarial Training：将对抗样本加入训练，在 NLP 任务中比较实用
 

SnapMix，利用可视化图像得到合理的mix区域
https://arxiv.org/pdf/2012.04846.pdf

 




